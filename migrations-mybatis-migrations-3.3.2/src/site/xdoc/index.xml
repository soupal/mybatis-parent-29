<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2010-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis Migrations | Introduction</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
  </properties>

  <body>
    <section name="Introduction">
      <p>Evolving databases has been one of the major challenges for software development. Often times, regardless of
  our software development methodology, the database follows a different change management process. Despite our best
  efforts, few tools and practices have been able to change that. The tools of the past have been GUI centric,
  proprietary for a particular database and/or carried a steep license cost. Yet, at the end of the day they suffered
  from the same challenges.</p>
      <p>Recently, a few tools arrived and changed all of that. They did so by embracing simplicity and a few simple
  rules for database evolution to follow. A couple of good examples are Rails Migrations and dbdeploy. Both tools are
  similar in purpose, but quite different in implementation. The MyBatis Schema Migration System draws from both and
  seeks to be the best migration tool of its kind.</p>

      <subsection name="Goals">
        <p>To achieve a good database change management practice, we need to identify a few key goals.</p>
        <p>Thus, the MyBatis Schema Migration System (or MyBatis Migrations for short) seeks to:</p>
        <ul>
          <li>Work with any database, new or existing</li>
          <li>Leverage the source control system (e.g. Subversion)</li>
          <li>Enable concurrent developers or teams to work independently</li>
          <li>Allow conflicts very visible and easily manageable</li>
          <li>Allow for forward and backward migration (evolve, devolve respectively)</li>
          <li>Make the current status of the database easily accessible and comprehensible</li>
          <li>Enable migrations despite access privileges or bureaucracy</li>
          <li>Work with any methodology</li>
          <li>Encourages good, consistent practices</li>
        </ul>
      </subsection>
      
      <subsection name="The Video">
      	<p>To put it in short. Have a look at the video:</p>
        <iframe width="640" height="480" src="http://www.youtube.com/embed/c45AevIuYGk" frameborder="0"></iframe>      	
      </subsection>
    </section>
  </body>

</document>
